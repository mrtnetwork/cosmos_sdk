import 'package:cosmos_sdk/src/models/networks/osmosis/osmosis_gamm_v1beta1/messages/pool_asset.dart';
import 'package:cosmos_sdk/src/models/networks/osmosis/osmosis_gamm_v1beta1/types/types.dart';
import 'package:cosmos_sdk/src/protobuf/protobuf.dart';
import 'package:cosmos_sdk/src/utils/quick_extensions.dart';

/// Parameters for changing the weights in a balancer pool smoothly from a start
/// weight and end weight over a period of time. Currently, the only smooth change
/// supported is linear changing between the two weights, but more types may be added in the future.
/// When these parameters are set, the weight w(t) for pool time t is the following: t <= start_time:
/// w(t) = initial_pool_weights start_time < t <= start_time + duration: w(t) = initial_pool_weights +
/// (t - start_time) * (target_pool_weights - initial_pool_weights) / (duration) t > start_time +
/// duration: w(t) = target_pool_weights
class OsmosisGammSmoothWeightChangeParams extends CosmosMessage {
  /// The start time for beginning the weight change.
  /// If a parameter change / pool instantiation leaves this blank,
  /// it should be generated by the state_machine as the current time.
  final ProtobufTimestamp startTime;

  /// Duration for the weights to change over
  final ProtobufDuration duration;

  /// The initial pool weights. These are copied from the pool's settings
  /// at the time of weight change instantiation.
  /// The amount PoolAsset.token.amount field is ignored if present,
  /// future type refactorings should just have a type with the denom & weight
  /// here.
  final List<OsmosisGammPoolAsset> initialPoolWeights;

  /// The target pool weights. The pool weights will change linearly with respect
  /// to time between start_time, and start_time + duration. The amount
  /// PoolAsset.token.amount field is ignored if present, future type
  /// refactorings should just have a type with the denom & weight here.
  final List<OsmosisGammPoolAsset> targetPoolWeights;

  OsmosisGammSmoothWeightChangeParams(
      {required this.startTime,
      required this.duration,
      required List<OsmosisGammPoolAsset> initialPoolWeights,
      required List<OsmosisGammPoolAsset> targetPoolWeights})
      : initialPoolWeights = initialPoolWeights.immutable,
        targetPoolWeights = targetPoolWeights.immutable;
  factory OsmosisGammSmoothWeightChangeParams.deserialize(List<int> bytes) {
    final decode = CosmosProtocolBuffer.decode(bytes);
    return OsmosisGammSmoothWeightChangeParams(
      startTime: ProtobufTimestamp.deserialize(decode.getField(1)),
      duration: ProtobufDuration.deserialize(decode.getField(2)),
      initialPoolWeights: decode
          .getFields(3)
          .map((e) => OsmosisGammPoolAsset.deserialize(e))
          .toList(),
      targetPoolWeights: decode
          .getFields(4)
          .map((e) => OsmosisGammPoolAsset.deserialize(e))
          .toList(),
    );
  }
  factory OsmosisGammSmoothWeightChangeParams.fromRpc(
      Map<String, dynamic> json) {
    return OsmosisGammSmoothWeightChangeParams(
        startTime: ProtobufTimestamp.fromString(json["start_time"]),
        duration: ProtobufDuration.fromString(json["duration"]),
        initialPoolWeights: (json["initial_pool_weights"] as List?)
                ?.map((e) => OsmosisGammPoolAsset.fromRpc(e))
                .toList() ??
            <OsmosisGammPoolAsset>[],
        targetPoolWeights: (json["target_pool_weights"] as List?)
                ?.map((e) => OsmosisGammPoolAsset.fromRpc(e))
                .toList() ??
            <OsmosisGammPoolAsset>[]);
  }

  @override
  List<int> get fieldIds => [1, 2, 3, 4];

  @override
  Map<String, dynamic> toJson() {
    return {
      "start_time": startTime.toJson(),
      "duration": duration.toJson(),
      "initial_pool_weights":
          initialPoolWeights.map((e) => e.toJson()).toList(),
      "target_pool_weights": targetPoolWeights.map((e) => e.toJson()).toList()
    };
  }

  @override
  String get typeUrl =>
      OsmosisGammV1beta1Types.smoothWeightChangeParams.typeUrl;

  @override
  List get values =>
      [startTime, duration, initialPoolWeights, targetPoolWeights];
}
